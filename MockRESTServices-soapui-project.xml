<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="5d0a6cea-8eeb-4eeb-8436-0262bdf3ecba" activeEnvironment="Default" name="MockRESTServices" resourceRoot="" soapui-version="5.4.0" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:restMockService id="6312fd03-c07d-40e3-8dc9-841e364a6cf7" port="8080" path="/" host="P24852" name="REST MockServices"><con:description>Mock services that also logs post request body</con:description><con:settings/><con:properties/><con:onRequestScript>if( mockRequest.httpRequest.method == "POST" ) {
	log.info "POST received"

     def path = context.expand('${projectDir}').replace( (char)'/', File.separatorChar )
     def now = new Date().format("yyyy-MM-dd'T'HH.mm.ss.SSS")
     def file = new File(path, now)
     
     file &lt;&lt; mockRequest.requestContent
     mockRequest.httpResponse.status = 201

     log.info "Request body logged to : " + file.path
     
} else {
	log.info "GET received"
}
</con:onRequestScript><con:restMockAction name="GET resource" method="GET" resourcePath="/resources/get-request" id="fb8e8a7a-43ce-47e2-9082-0ea4790492a7"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response" id="707eba83-208e-40de-87f2-51348b41e1b5" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
	"name":"beautiful",
	"class":"outsanding"
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="POST resource" method="POST" resourcePath="/resources/post-request" id="ff8c1768-e0be-4a6b-91a8-c0484dbfaa8a"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response" id="bedf04b9-0d0e-498b-b63d-406b12ddb9f3" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
	"created" : true
}
</con:responseContent></con:response></con:restMockAction></con:restMockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>